name: CI / Release

# 1) Run tests on pushes to master, PRs, or tags
# 2) Create a GitHub Release (and upload artifacts) when you push a tag like "v1.2.3"
on:
  push:
    branches:
      - master
    tags:
      - 'v*'           # every tag prefixed with "v", e.g. "v1.0.0"
  pull_request:

env:
  # Ensure we cache ~/.cargo so both registry+git caches are shared
  CARGO_HOME: ~/.cargo
  RUSTUP_HOME:  ~/.rustup

jobs:
  # ────────────────────────────────────────────────────────────────────────────
  # 1) CI job: run clippy + tests on any push/PR (including tag pushes)
  # ────────────────────────────────────────────────────────────────────────────
  test-and-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4                 # latest checkout action

      - name: Install Rust toolchain
        # Use @stable instead of @main; ensures GitHub can find it
        uses: dtolnay/rust-toolchain@stable       
        with:
          toolchain: stable
          components: clippy, rustfmt

      # Cache the registry and index so that `cargo fetch` is fast
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo-git index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      # Lint with clippy, fail on warnings
      - name: Run clippy
        run: cargo clippy --all -- -D warnings

      # Run all tests
      - name: Run tests
        run: cargo test --all

  # ────────────────────────────────────────────────────────────────────────────
  # 2) Release build: only runs when you push a tag (vX.Y.Z)
  #    a) Builds for multiple targets in parallel (using `cross`)
  #    b) Uploads each compiled binary to the Release job as an artifact
  # ────────────────────────────────────────────────────────────────────────────
  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: test-and-lint       # ensure tests pass before building release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # The set of targets to build. Add/remove as needed.
        target:
          - x86_64-unknown-linux-musl
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable 
        with:
          toolchain: stable

      # Install cross (cached by Cargo)
      - name: Install cross (pinned to 0.2.5)
        uses: actions-rs/install@v1
        with:
          crate: cross
          version: "0.2.5"

      # Ensure the Rust target is added (though cross usually handles this)
      - name: Add Rust target (if needed)
        run: rustup target add ${{ matrix.target }} || true

      # Build with cross so that each matrix entry runs in parallel
      - name: Build release for ${{ matrix.target }}
        run: |
          cross build --release --target ${{ matrix.target }}
        env:
          # Let cross reuse the host’s Docker credentials
          CROSS_WAIT: "10"

      # Collect the built binary (.exe on Windows)
      - name: Package artifact
        run: |
          BINARY_NAME="watchdogfs"                          # ← Replace with your actual binary name
          TARGET_DIR="target/${{ matrix.target }}/release"
          mkdir -p artifacts/${{ matrix.target }}

          if [[ "${{ matrix.target }}" == *"windows-gnu" ]]; then
            cp "${TARGET_DIR}/${BINARY_NAME}.exe" \
               "artifacts/${{ matrix.target }}/${BINARY_NAME}-${{ matrix.target }}.exe"
          else
            cp "${TARGET_DIR}/${BINARY_NAME}" \
               "artifacts/${{ matrix.target }}/${BINARY_NAME}-${{ matrix.target }}"
            chmod +x "artifacts/${{ matrix.target }}/${BINARY_NAME}-${{ matrix.target }}"
          fi

      - name: Upload built artifact
        uses: actions/upload-artifact@v4      # v4 is the latest version
        with:
          name: watchdogfs-${{ matrix.target }}
          path: artifacts/${{ matrix.target }}/

  # ────────────────────────────────────────────────────────────────────────────
  # 3) Once all matrix builds complete, create a GitHub Release & attach binaries
  # ────────────────────────────────────────────────────────────────────────────
  publish-to-github-release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts from release job
        uses: actions/download-artifact@v4      # v4 is the latest version
        with:
          path: ./all_artifacts                 # gather all target-specific binaries

      # Create (or update) the GitHub Release and upload all binaries at once
      - name: Create GitHub Release & Attach Assets
        id: create_release
        uses: softprops/action-gh-release@v1    # v1 is the latest stable
        with:
          files: ./all_artifacts/*/*            # upload every file in subfolders
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release published
        run: echo "✅ Release ${{ github.ref_name }} published with artifacts!"
