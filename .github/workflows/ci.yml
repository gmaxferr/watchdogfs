name: CI / Release

# 1) Run tests on pushes to master, PRs, or tags
# 2) Create a GitHub Release (and upload artifacts) when you push a tag like "v1.2.3"
on:
  push:
    branches:
      - master
    tags:
      - 'v*'           # every tag prefixed with "v", e.g. "v1.0.0"
  pull_request:

env:
  # Ensure we cache ~/.cargo so both registry+git caches are shared
  CARGO_HOME: ~/.cargo
  RUSTUP_HOME:  ~/.rustup

jobs:
  # ────────────────────────────────────────────────────────────────────────────
  # 1) CI job: run clippy + tests on any push/PR (including tag pushes)
  # ────────────────────────────────────────────────────────────────────────────
  test-and-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4                # latest checkout action :contentReference[oaicite:12]{index=12}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@main        # actively maintained Rust installer :contentReference[oaicite:13]{index=13}
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt, clippy

      # Cache the registry and index so that `cargo fetch` is fast
      - name: Cache cargo registry
        uses: actions/cache@v3                   # v3 is the current cache action :contentReference[oaicite:14]{index=14}
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo-git index
        uses: actions/cache@v3                   # cache the git index for faster fetches :contentReference[oaicite:15]{index=15}
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      # Lint with clippy, fail on warnings
      - name: Run clippy
        run: cargo clippy --all -- -D warnings

      # Run all tests
      - name: Run tests
        run: cargo test --all

  # ────────────────────────────────────────────────────────────────────────────
  # 2) Release build: only runs when you push a tag (vX.Y.Z)
  #    a) Builds for multiple targets in parallel (using `cross`)
  #    b) Uploads each compiled binary to the Release job as an artifact
  # ────────────────────────────────────────────────────────────────────────────
  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: test-and-lint       # ensure tests pass before building release :contentReference[oaicite:16]{index=16}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # The set of targets to build. Add/remove as needed.
        target:
          - x86_64-unknown-linux-musl
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4                # checkout again for each matrix entry :contentReference[oaicite:17]{index=17}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@main        # use the same Rust installer :contentReference[oaicite:18]{index=18}
        with:
          toolchain: stable
          profile: minimal

      # Install cross (cached by Cargo)
      - name: Install cross
        run: cargo install cross

      # Ensure the Rust target is added (though cross usually handles this)
      - name: Add Rust target (if needed)
        run: rustup target add ${{ matrix.target }} || true

      # Build with cross so that each matrix entry runs in parallel
      - name: Build release for ${{ matrix.target }}
        run: |
          cross build --release --target ${{ matrix.target }}
        env:
          # Let cross reuse the host’s Docker credentials
          CROSS_WAIT: "10"

      # Collect the built binary (.exe on Windows)
      - name: Package artifact
        run: |
          BINARY_NAME="watchdogfs"                          # ← Replace with your actual binary name
          TARGET_DIR="target/${{ matrix.target }}/release"
          mkdir -p artifacts/${{ matrix.target }}

          if [[ "${{ matrix.target }}" == *"windows-gnu" ]]; then
            cp "${TARGET_DIR}/${BINARY_NAME}.exe" \
               "artifacts/${{ matrix.target }}/${BINARY_NAME}-${{ matrix.target }}.exe"
          else
            cp "${TARGET_DIR}/${BINARY_NAME}" \
               "artifacts/${{ matrix.target }}/${BINARY_NAME}-${{ matrix.target }}"
            chmod +x "artifacts/${{ matrix.target }}/${BINARY_NAME}-${{ matrix.target }}"
          fi

      - name: Upload built artifact
        uses: actions/upload-artifact@v4        # v4 is the latest upload-artifact action :contentReference[oaicite:19]{index=19}
        with:
          name: watchdogfs-${{ matrix.target }}
          path: artifacts/${{ matrix.target }}/

  # ────────────────────────────────────────────────────────────────────────────
  # 3) Once all matrix builds complete, create a GitHub Release & attach binaries
  # ────────────────────────────────────────────────────────────────────────────
  publish-to-github-release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts from release job
        uses: actions/download-artifact@v4     # v4 is the latest download-artifact action :contentReference[oaicite:20]{index=20}
        with:
          # Grab every artifact that “release” uploaded
          path: ./all_artifacts

      # Create a GitHub Release (or update if it already exists) using softprops/action-gh-release@v1
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1   # active, community-recommended release action :contentReference[oaicite:21]{index=21}
        with:
          files: ./all_artifacts/*/*           # upload all binaries in subfolders as assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release published
        run: echo "✅ Release ${{ github.ref_name }} published with artifacts!"
